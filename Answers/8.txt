Диаграмма классов
Диаграмма классов — это графическое представление структуры системы, которое показывает классы, их атрибуты, методы и отношения между ними. Она используется для визуализации объектно-ориентированной модели системы и помогает лучше понять её архитектуру.

Основные элементы диаграммы классов
Класс:

Представляет собой прямоугольник, разделенный на три части:

Имя класса: Верхняя часть.

Атрибуты: Средняя часть (переменные класса).

Методы: Нижняя часть (функции класса).

Пример:

Copy
+---------------------+
|      ClassName      |
+---------------------+
| - attribute1: Type  |
| - attribute2: Type  |
+---------------------+
| + method1(): Type   |
| + method2(): Type   |
+---------------------+
Отношения между классами:

Наследование: Стрелка с треугольным наконечником (▷).

Ассоциация: Обычная стрелка (→) или линия (—).

Агрегация: Линия с ромбом на стороне целого (◇—).

Композиция: Линия с закрашенным ромбом на стороне целого (◆—).

Зависимость: Пунктирная стрелка (---→).

Модификаторы доступа:

+ — public (доступен всем).

- — private (доступен только внутри класса).

# — protected (доступен внутри класса и его подклассов).

Пример диаграммы классов
Рассмотрим пример системы для управления библиотекой. У нас есть классы Library, Book и Author.

Диаграмма классов:
Copy
+----------------+          +----------------+          +----------------+
|    Library     |          |      Book      |          |     Author     |
+----------------+          +----------------+          +----------------+
| - books: List  |<>------->| - title: String|          | - name: String |
+----------------+          | - author: Author|<>------>| + writeBook()  |
| + addBook()    |          +----------------+          +----------------+
| + removeBook() |
+----------------+
Описание:
Класс Library содержит список книг (books).

Класс Book связан с классом Author через ассоциацию.

Класс Author может писать книги (writeBook).

Взаимосвязь диаграммы классов и кода
Диаграмма классов напрямую отражает структуру кода. Давайте реализуем описанную выше диаграмму на Ruby.

Код:
ruby
Copy
class Author
  attr_accessor :name

  def initialize(name)
    @name = name
  end

  def write_book(title)
    Book.new(title, self)
  end
end

class Book
  attr_accessor :title, :author

  def initialize(title, author)
    @title = title
    @author = author
  end
end

class Library
  attr_accessor :books

  def initialize
    @books = []
  end

  def add_book(book)
    @books << book
  end

  def remove_book(book)
    @books.delete(book)
  end
end

# Использование
author = Author.new("J.K. Rowling")
book = author.write_book("Harry Potter")

library = Library.new
library.add_book(book)

puts "Library has book: #{library.books.first.title} by #{library.books.first.author.name}"
# Output: Library has book: Harry Potter by J.K. Rowling
Как составлять диаграмму классов
Определите классы:

Выделите основные сущности системы (например, Library, Book, Author).

Определите атрибуты и методы:

Для каждого класса укажите переменные (атрибуты) и функции (методы).

Определите отношения между классами:

Укажите, как классы связаны друг с другом (наследование, ассоциация, агрегация и т.д.).

Используйте правильные обозначения:

Для модификаторов доступа (+, -, #).

Для типов отношений (стрелки, линии, ромбы).

Проверьте диаграмму на соответствие коду:

Убедитесь, что диаграмма точно отражает структуру и поведение системы.

Пример сложной диаграммы классов
Рассмотрим систему для управления заказами в интернет-магазине.

Диаграмма классов:
Copy
+----------------+          +----------------+          +----------------+
|    Customer    |          |     Order      |          |    Product     |
+----------------+          +----------------+          +----------------+
| - name: String |<-------->| - id: Integer  |<>------->| - name: String |
| - email: String|          | - customer: Customer|     | - price: Float |
+----------------+          | - products: List<Product>|+----------------+
                            +----------------+
                                   ^
                                   |
                                   |
                            +----------------+
                            |  Payment       |
                            +----------------+
                            | - amount: Float|
                            | - order: Order |
                            +----------------+
Описание:
Класс Customer связан с классом Order через ассоциацию.

Класс Order содержит список продуктов (products).

Класс Payment связан с классом Order через композицию.

Итог
Диаграмма классов — это мощный инструмент для визуализации структуры системы.

Она включает классы, их атрибуты, методы и отношения между ними.

Диаграмма классов напрямую отражает структуру кода, что помогает лучше понять и спроектировать систему.