Архитектурный паттерн MVP (Model-View-Presenter)
MVP — это архитектурный паттерн, который является эволюцией паттерна MVC. Он был разработан для решения некоторых проблем, связанных с MVC, особенно в контексте разработки пользовательских интерфейсов.

Проблематика в MVC, которая привела к появлению MVP
1. Проблема тестируемости
В MVC контроллер часто напрямую взаимодействует с представлением, что затрудняет модульное тестирование.

Представление и контроллер могут быть тесно связаны, что делает код хрупким и трудным для тестирования.

2. Проблема разделения ответственности
В MVC контроллер может выполнять слишком много задач: обработка пользовательского ввода, управление бизнес-логикой и обновление представления.

Это приводит к нарушению принципа единственной ответственности и усложняет поддержку кода.

Базовый подход в MVP
MVP разделяет приложение на три основных компонента:

Model (Модель):

Отвечает за данные и бизнес-логику.

Не зависит от пользовательского интерфейса.

View (Представление):

Отвечает за отображение данных пользователю.

Пассивно и не содержит логики обработки данных.

Presenter (Презентер):

Выступает посредником между моделью и представлением.

Обрабатывает пользовательский ввод, обновляет модель и управляет представлением.

Взаимодействие объектов в рамках операций CRUD
Рассмотрим пример взаимодействия объектов в рамках операций CRUD (Create, Read, Update, Delete) на диаграмме последовательности.

Сценарий: Создание новой записи (Create)
Пользователь заполняет форму и нажимает кнопку "Создать".

View передает данные в Presenter.

Presenter создает новую запись в Model.

Model уведомляет Presenter об успешном создании.

Presenter обновляет View.

Диаграмма последовательности:
Copy
+--------+       +-----------+       +-----------+       +--------+
| :User  |       | :View     |       | :Presenter|       | :Model |
+--------+       +-----------+       +-----------+       +--------+
    |                |                    |                |
    |--- fill_form()>|                    |                |
    |--- submit() -->|                    |                |
    |                |--- handle_submit()>|                |
    |                |                    |--- create() -->|
    |                |                    |                |--- save() ---|
    |                |<-- update_view() --|<-- notify() ---|
    |<-- show_msg() -|                    |                |
    |                |                    |                |
Код:
ruby
Copy
class User
  def submit_form(view, data)
    view.handle_submit(data)
  end
end

class View
  def initialize(presenter)
    @presenter = presenter
  end

  def handle_submit(data)
    @presenter.create(data)
  end

  def update_view(message)
    puts "View updated: #{message}"
  end
end

class Presenter
  def initialize(model, view)
    @model = model
    @view = view
  end

  def create(data)
    @model.save(data)
  end

  def notify(message)
    @view.update_view(message)
  end
end

class Model
  def initialize
    @data = []
    @observers = []
  end

  def add_observer(observer)
    @observers << observer
  end

  def save(data)
    @data << data
    notify_observers("Record created: #{data}")
  end

  def notify_observers(message)
    @observers.each { |observer| observer.notify(message) }
  end
end

model = Model.new
view = View.new(Presenter.new(model, view))
model.add_observer(Presenter.new(model, view))
user = User.new
user.submit_form(view, "New Record")
# Output: View updated: Record created: New Record
Применение MVP в фреймворках
Android Development:

MVP широко используется в разработке приложений для Android.

Пример: Разделение логики и интерфейса для упрощения тестирования и поддержки.

Windows Forms (C#):

MVP используется для разработки настольных приложений на C#.

Пример: Разделение логики и интерфейса для упрощения тестирования.

GWT (Google Web Toolkit):

MVP используется для разработки веб-приложений на Java.

Пример: Разделение логики и интерфейса для упрощения тестирования и поддержки.

Итог
MVP — это архитектурный паттерн, который решает проблемы тестируемости и разделения ответственности, присущие MVC.

В MVP презентер выступает посредником между моделью и представлением, что упрощает тестирование и поддержку кода.

Диаграмма последовательности иллюстрирует взаимодействие объектов в рамках операций CRUD.

MVP применяется во многих популярных фреймворках, таких как Android Development, Windows Forms и GWT.