ActiveRecords  (обращается к querry methods) -> нахоитд важные параметры и поля нужные , передёт их в Relation, там формируется примерный запрос, затем оно в адаптер базы данных, postgres_adapter.rb (который наследуется от абстрактного) , там уже есть конкретные данные из бд , тут же и генерируются запросы в бд тут же оно и выполняется, затем эти данные десериализуются и получается объект сущности и собственно дальше объект возвращается в контроллер и дальше идёт с ним



Процесс преобразования данных из базы данных в объекты в Rails:
ActiveRecord и Query Methods:

Когда вы вызываете методы запросов (например, where, find, all и т.д.) на модели ActiveRecord, эти методы не выполняют запрос к базе данных сразу. Вместо этого они возвращают объект ActiveRecord::Relation, который представляет собой "ленивый" (lazy) запрос.

ActiveRecord::Relation:

ActiveRecord::Relation — это объект, который хранит информацию о запросе (например, условия, сортировку, лимиты и т.д.). Он позволяет строить цепочки запросов, которые будут выполнены только тогда, когда это действительно необходимо (например, при вызове методов, которые требуют данных, таких как each, to_a, first, count и т.д.).

Генерация SQL-запроса:

Когда запрос должен быть выполнен (например, при попытке получить данные), ActiveRecord::Relation преобразует себя в SQL-запрос. Этот процесс включает в себя сбор всех условий, сортировок, лимитов и других параметров, которые были указаны в цепочке запросов.

Адаптер базы данных:

Сгенерированный SQL-запрос передается в адаптер базы данных (например, postgresql_adapter для PostgreSQL). Адаптер отвечает за выполнение запроса в базе данных и получение результата. Адаптер наследуется от абстрактного адаптера, который определяет общий интерфейс для работы с различными базами данных.

Выполнение запроса и получение данных:

Адаптер выполняет SQL-запрос в базе данных и получает результат в виде набора строк (результат запроса). Эти строки представляют собой сырые данные, которые еще не являются объектами Ruby.

Десериализация данных:

Полученные данные десериализуются (преобразуются) в объекты Ruby. ActiveRecord создает экземпляры модели на основе данных, полученных из базы данных. Каждая строка результата запроса преобразуется в объект модели, где атрибуты объекта соответствуют столбцам таблицы базы данных.

Возврат объектов в контроллер:

После того как данные были преобразованы в объекты Ruby, эти объекты возвращаются в контроллер или в любое другое место, где был вызван запрос. Теперь вы можете работать с этими объектами как с обычными объектами Ruby, вызывая их методы и получая доступ к их атрибутам.





Вы абсолютно правы, я упустил еще два важных компонента: ActiveRecord::FinderMethods и ActiveRecord::Base. Эти модули и класс играют ключевую роль в процессе выполнения @client.bookings. Давайте расширим диаграмму последовательности, чтобы включить их, и подробно опишем их участие.

Уточненная диаграмма последовательности с ActiveRecord::FinderMethods и ActiveRecord::Base
Контроллер или представление:

Вызов метода bookings на объекте @client:

ruby
Copy
@client.bookings
Модель Client:

Метод bookings определен в модели Client через ассоциацию has_many :bookings.

Возвращает объект ActiveRecord::Associations::CollectionProxy.

ActiveRecord::Associations::CollectionProxy:

Прокси-объект, который лениво загружает данные.

Вызов метода, требующего данных (например, each, to_a, first), инициирует выполнение запроса.

ActiveRecord::QueryMethods:

CollectionProxy использует методы из модуля ActiveRecord::QueryMethods для формирования SQL-запроса.

Например, метод where добавляет условие bookings.client_id = clients.id.

ActiveRecord::Relation:

CollectionProxy делегирует работу объекту ActiveRecord::Relation, который формирует SQL-запрос.

Условие WHERE формируется на основе ассоциации (bookings.client_id = clients.id).

ActiveRecord::FinderMethods:

Модуль ActiveRecord::FinderMethods предоставляет методы для поиска записей, такие как find, find_by, first, last и т.д.

В данном случае используется метод to_a, который вызывает выполнение запроса.

ActiveRecord::Base:

Класс ActiveRecord::Base является родительским классом для всех моделей Rails.

Он предоставляет базовую функциональность для работы с базой данных, включая методы для выполнения запросов.

ActiveRecord::Base.connection:

ActiveRecord::Relation передает SQL-запрос в адаптер базы данных через метод connection.

ActiveRecord::ConnectionAdapters::AbstractAdapter:

Абстрактный адаптер определяет общий интерфейс для работы с различными базами данных.

Конкретный адаптер (например, postgresql_adapter) наследует этот интерфейс.

Адаптер базы данных (postgresql_adapter):

Адаптер выполняет SQL-запрос в базе данных.

Пример SQL-запроса:

sql
Copy
SELECT * FROM bookings WHERE bookings.client_id = 1;
База данных (PostgreSQL):

База данных выполняет запрос и возвращает результат в виде набора строк.

Адаптер базы данных:

Адаптер преобразует результат в массив хэшей, где каждый хэш представляет строку из таблицы.

Пример результата:

ruby
Copy
[
  { "id" => 1, "client_id" => 1, "booking_date" => "2023-10-01" },
  { "id" => 2, "client_id" => 1, "booking_date" => "2023-10-02" }
]
ActiveRecord::Result:

Адаптер передает результат в объект ActiveRecord::Result, который содержит данные и метаинформацию.

Метод find_by_sql:

ActiveRecord::Result передается в метод find_by_sql, который преобразует данные в объекты модели Booking.

Метод instantiate:

Для каждой строки данных вызывается метод instantiate, который создает объект модели Booking.

Пример объекта:

ruby
Copy
#<Booking id: 1, client_id: 1, booking_date: "2023-10-01">
Коллекция объектов Booking:

Метод find_by_sql возвращает массив объектов Booking.

ActiveRecord::Associations::CollectionProxy:

Коллекция объектов Booking возвращается в CollectionProxy.

Контроллер или представление:

Коллекция объектов Booking возвращается в контроллер или представление.

Теперь @client.bookings содержит все бронирования, связанные с @client.

Уточненная текстовая диаграмма последовательности
plaintext
Copy
Контроллер/Представление
       |
       | @client.bookings
       v
Модель Client (has_many :bookings)
       |
       | Возвращает CollectionProxy
       v
ActiveRecord::Associations::CollectionProxy
       |
       | Вызов метода (например, each, to_a)
       v
ActiveRecord::QueryMethods
       |
       | Формирует условия запроса
       v
ActiveRecord::Relation
       |
       | Формирует SQL-запрос
       v
ActiveRecord::FinderMethods
       |
       | Использует методы для поиска записей
       v
ActiveRecord::Base
       |
       | Предоставляет базовую функциональность
       v
ActiveRecord::Base.connection
       |
       | Передает запрос адаптеру
       v
ActiveRecord::ConnectionAdapters::AbstractAdapter
       |
       | Определяет интерфейс для адаптера
       v
Адаптер базы данных (postgresql_adapter)
       |
       | Выполняет SQL-запрос
       v
База данных (PostgreSQL)
       |
       | Возвращает результат
       v
Адаптер базы данных
       |
       | Преобразует результат в массив хэшей
       v
ActiveRecord::Result
       |
       | Передает данные в find_by_sql
       v
Метод find_by_sql
       |
       | Преобразует данные в объекты Booking
       v
Метод instantiate
       |
       | Создает объекты Booking
       v
Коллекция объектов Booking
       |
       | Возвращает коллекцию
       v
ActiveRecord::Associations::CollectionProxy
       |
       | Возвращает коллекцию
       v
Контроллер/Представление
Пример данных на каждом этапе:
Контроллер/Представление:

ruby
Copy
@client.bookings
Модель Client:

ruby
Copy
has_many :bookings
ActiveRecord::Associations::CollectionProxy:

ruby
Copy
#<ActiveRecord::Associations::CollectionProxy [...]>
SQL-запрос:

sql
Copy
SELECT * FROM bookings WHERE bookings.client_id = 1;
Результат из базы данных:

ruby
Copy
[
  { "id" => 1, "client_id" => 1, "booking_date" => "2023-10-01" },
  { "id" => 2, "client_id" => 1, "booking_date" => "2023-10-02" }
]
Объекты Booking:

ruby
Copy
[
  #<Booking id: 1, client_id: 1, booking_date: "2023-10-01">,
  #<Booking id: 2, client_id: 1, booking_date: "2023-10-02">
]
Итог:
Эта уточненная диаграмма показывает, как вызов @client.bookings проходит через все ключевые компоненты Rails, включая ActiveRecord::FinderMethods, ActiveRecord::Base, ActiveRecord::QueryMethods, ActiveRecord::Relation, ActiveRecord::ConnectionAdapters и postgresql_adapter. Модель Client инициирует процесс, но основную работу выполняет ActiveRecord и адаптер базы данных.





Что такое прокси-объект?
Прокси-объект — это объект, который действует как промежуточный слой между вашим кодом и реальными данными. Он откладывает выполнение операций до тех пор, пока это действительно не понадобится. В Rails прокси-объекты используются для реализации ленивой загрузки (lazy loading).

Основные характеристики прокси-объекта:
Ленивая загрузка:

Прокси-объект не выполняет запрос к базе данных сразу. Вместо этого он ждет, пока вы не попытаетесь получить данные (например, через each, to_a, first).

Цепочка методов:

Вы можете вызывать методы, такие как where, order, limit, и они будут добавлять условия к запросу, но сам запрос все еще не выполняется.

Прозрачность:

Прокси-объект ведет себя как обычная коллекция объектов, поэтому вы можете работать с ним, не задумываясь о том, что это прокси.

Какой прокси-объект создается в Rails?
В Rails при вызове ассоциации (например, @client.bookings) создается объект ActiveRecord::Associations::CollectionProxy. Это специальный прокси-объект, который используется для работы с ассоциациями has_many и has_and_belongs_to_many.

Что такое ActiveRecord::Associations::CollectionProxy?
CollectionProxy — это объект-прокси, который представляет собой коллекцию связанных записей (например, все бронирования, связанные с клиентом). Он используется для работы с ассоциациями has_many и has_and_belongs_to_many.

Основные особенности CollectionProxy:
Ленивая загрузка:

Запрос к базе данных не выполняется сразу при вызове @client.bookings.

Вместо этого создается объект CollectionProxy, который откладывает выполнение запроса до тех пор, пока это действительно не понадобится (например, при попытке получить данные).

Цепочка методов:

Вы можете вызывать методы, такие как where, order, limit, и они будут добавлять условия к запросу, но сам запрос все еще не выполняется.

Делегирование:

CollectionProxy делегирует вызовы методов объекту ActiveRecord::Relation, который отвечает за формирование и выполнение SQL-запросов.