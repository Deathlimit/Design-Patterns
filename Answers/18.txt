Рефакторинг
Рефакторинг — это процесс улучшения структуры существующего кода без изменения его внешнего поведения. Цель рефакторинга — сделать код более читаемым, поддерживаемым и расширяемым, а также упростить его дальнейшую разработку и тестирование.

Когда требуется применять рефакторинг?
Рефакторинг следует применять в следующих случаях:

Дублирование кода:

Если один и тот же код повторяется в нескольких местах, его следует вынести в отдельный метод или класс.

Сложный и запутанный код:

Если код трудно понять и поддерживать, его следует упростить.

Длинные методы:

Если метод слишком длинный и выполняет несколько задач, его следует разбить на несколько более мелких методов.

Большие классы:

Если класс слишком большой и выполняет несколько задач, его следует разбить на несколько более мелких классов.

Нарушение принципов SOLID:

Если код нарушает принципы SOLID (например, принцип единственной ответственности), его следует реорганизовать.

Перед добавлением нового функционала:

Если код трудно расширять, его следует реорганизовать перед добавлением нового функционала.

После исправления багов:

Если код содержит баги, его следует реорганизовать, чтобы предотвратить их повторное появление.

Примеры методов рефакторинга
Извлечение метода (Extract Method):

Вынесение части кода из метода в отдельный метод.

Антипаттерн: Длинный метод, который выполняет несколько задач.

Пример:

ruby
Copy
# До
def print_owing(amount)
  print_banner
  puts "Name: #{@name}"
  puts "Amount: #{amount}"
end

# После
def print_owing(amount)
  print_banner
  print_details(amount)
end

def print_details(amount)
  puts "Name: #{@name}"
  puts "Amount: #{amount}"
end
Замена временной переменной на метод (Replace Temp with Query):

Замена временной переменной на вызов метода.

Антипаттерн: Использование временных переменных для хранения промежуточных результатов.

Пример:

ruby
Copy
# До
def calculate_total
  base_price = @quantity * @item_price
  if base_price > 1000
    base_price * 0.95
  else
    base_price * 0.98
  end
end

# После
def calculate_total
  if base_price > 1000
    base_price * 0.95
  else
    base_price * 0.98
  end
end

def base_price
  @quantity * @item_price
end
Замена условного оператора полиморфизмом (Replace Conditional with Polymorphism):

Замена условного оператора на полиморфные вызовы.

Антипаттерн: Длинные условные операторы, которые трудно поддерживать.

Пример:

ruby
Copy
# До
def speed
  case @type
  when :european
    base_speed
  when :african
    base_speed - load_factor * @number_of_coconuts
  when :norwegian_blue
    if @nailed
      0
    else
      base_speed
    end
  end
end

# После
class EuropeanBird
  def speed
    base_speed
  end
end

class AfricanBird
  def speed
    base_speed - load_factor * @number_of_coconuts
  end
end

class NorwegianBlueBird
  def speed
    @nailed ? 0 : base_speed
  end
end
Инкапсуляция поля (Encapsulate Field):

Замена прямого доступа к полю на вызовы методов.

Антипаттерн: Прямой доступ к полям класса.

Пример:

ruby
Copy
# До
class Person
  attr_accessor :name
end

# После
class Person
  def name
    @name
  end

  def name=(value)
    @name = value
  end
end
Замена магического числа символьной константой (Replace Magic Number with Symbolic Constant):

Замена числовых литералов на именованные константы.

Антипаттерн: Использование "магических чисел" в коде.

Пример:

ruby
Copy
# До
def potential_energy(mass, height)
  mass * 9.81 * height
end

# После
GRAVITATIONAL_CONSTANT = 9.81

def potential_energy(mass, height)
  mass * GRAVITATIONAL_CONSTANT * height
end
Примеры антипаттернов, которые исправляются рефакторингом
Дублирование кода (Duplicate Code):

Один и тот же код повторяется в нескольких местах.

Решение: Извлечение метода.

Длинный метод (Long Method):

Метод слишком длинный и выполняет несколько задач.

Решение: Извлечение метода.

Большой класс (Large Class):

Класс слишком большой и выполняет несколько задач.

Решение: Разделение класса.

Длинный список параметров (Long Parameter List):

Метод принимает слишком много параметров.

Решение: Замена параметров объектом.

Временное поле (Temporary Field):

Поле используется только в некоторых случаях.

Решение: Инкапсуляция поля.

Цепочка вызовов (Message Chains):

Длинная цепочка вызовов методов.

Решение: Сокрытие делегирования.

Итог
Рефакторинг — это процесс улучшения структуры кода без изменения его внешнего поведения.

Рефакторинг следует применять при дублировании кода, сложности, нарушении принципов SOLID и перед добавлением нового функционала.

Примеры методов рефакторинга: извлечение метода, замена временной переменной на метод, замена условного оператора полиморфизмом.

Примеры антипаттернов: дублирование кода, длинный метод, большой класс.