Ассоциация — это отношение между двумя классами, при котором объекты одного класса связаны с объектами другого класса. Это отношение может быть однонаправленным или двунаправленным. Ассоциация используется для моделирования взаимодействия между объектами.

Частные случаи ассоциации:
Однонаправленная ассоциация: Объект одного класса знает о существовании объекта другого класса, но не наоборот.

Двунаправленная ассоциация: Объекты обоих классов знают о существовании друг друга.

Агрегация: Частный случай ассоциации, где один класс является частью другого, но может существовать независимо.

Композиция: Более строгая форма агрегации, где часть не может существовать без целого.

Примеры ассоциации
1. Однонаправленная ассоциация
Пример: Класс Student знает о классе Course, но Course не знает о Student.

ruby
Copy
class Course
  attr_accessor :name

  def initialize(name)
    @name = name
  end
end

class Student
  attr_accessor :name, :course

  def initialize(name)
    @name = name
  end

  def enroll(course)
    @course = course
  end
end

course = Course.new("Ruby Programming")
student = Student.new("Alice")
student.enroll(course)

puts "#{student.name} is enrolled in #{student.course.name}"
# Output: Alice is enrolled in Ruby Programming
Диаграмма классов:

Copy
+----------------+          +----------------+
|    Student     |--------->|     Course     |
+----------------+          +----------------+
| + name         |          | + name         |
| + course       |          +----------------+
+----------------+
2. Двунаправленная ассоциация
Пример: Класс Student знает о классе Course, и Course знает о Student.

ruby
Copy
class Student
  attr_accessor :name, :courses

  def initialize(name)
    @name = name
    @courses = []
  end

  def enroll(course)
    @courses << course
    course.students << self
  end
end

class Course
  attr_accessor :name, :students

  def initialize(name)
    @name = name
    @students = []
  end
end

student = Student.new("Alice")
course = Course.new("Ruby Programming")
student.enroll(course)

puts "#{student.name} is enrolled in #{course.name}"
puts "#{course.name} has students: #{course.students.map(&:name).join(', ')}"
# Output:
# Alice is enrolled in Ruby Programming
# Ruby Programming has students: Alice
Диаграмма классов:

Copy
+----------------+          +----------------+
|    Student     |<-------->|     Course     |
+----------------+          +----------------+
| + name         |          | + name         |
| + courses      |          | + students     |
+----------------+          +----------------+
3. Агрегация
Пример: Класс Library содержит объекты класса Book, но книги могут существовать независимо от библиотеки.

ruby
Copy
class Book
  attr_accessor :title

  def initialize(title)
    @title = title
  end
end

class Library
  attr_accessor :books

  def initialize
    @books = []
  end

  def add_book(book)
    @books << book
  end
end

book1 = Book.new("Ruby Programming")
book2 = Book.new("OOP Principles")

library = Library.new
library.add_book(book1)
library.add_book(book2)

puts "Books in library: #{library.books.map(&:title).join(', ')}"
# Output: Books in library: Ruby Programming, OOP Principles
Диаграмма классов:

Copy
+----------------+          +----------------+
|    Library     |<>------->|      Book      |
+----------------+          +----------------+
| + books        |          | + title        |
+----------------+          +----------------+
4. Композиция
Пример: Класс Car содержит объект класса Engine, который не может существовать без автомобиля.

ruby
Copy
class Engine
  def start
    puts "Engine started"
  end
end

class Car
  def initialize
    @engine = Engine.new
  end

  def start
    @engine.start
    puts "Car is moving"
  end
end

car = Car.new
car.start
# Output:
# Engine started
# Car is moving
Диаграмма классов:

Copy
+----------------+          +----------------+
|      Car       |<>------->|     Engine     |
+----------------+          +----------------+
| + engine       |          | + start()      |
+----------------+          +----------------+
Паттерны проектирования, использующие ассоциацию
Компоновщик (Composite)

Использует композицию для создания древовидных структур.

Пример: Группа объектов, которые могут быть частью друг друга (например, файлы и папки).

Наблюдатель (Observer)

Использует ассоциацию для связи между объектами, где один объект уведомляет другие об изменениях.

Пример: Подписка на события.

Посетитель (Visitor)

Использует ассоциацию для добавления новых операций к объектам без изменения их классов.

Пример: Обход структуры данных и выполнение операций над каждым элементом.

Пример паттерна "Наблюдатель" (Observer)
ruby
Copy
class Subject
  attr_accessor :observers

  def initialize
    @observers = []
  end

  def add_observer(observer)
    @observers << observer
  end

  def notify_observers
    @observers.each { |observer| observer.update(self) }
  end
end

class Observer
  def update(subject)
    puts "Observer received update from #{subject}"
  end
end

subject = Subject.new
observer1 = Observer.new
observer2 = Observer.new

subject.add_observer(observer1)
subject.add_observer(observer2)

subject.notify_observers
# Output:
# Observer received update from #<Subject:0x00007f8e1d0b0e80>
# Observer received update from #<Subject:0x00007f8e1d0b0e80>
Объяснение:

Класс Subject связан с классом Observer через ассоциацию.

При изменении состояния Subject уведомляет всех наблюдателей.

Итог
Ассоциация — это отношение между классами, которое может быть однонаправленным, двунаправленным, агрегацией или композицией.

Паттерны проектирования, такие как Компоновщик, Наблюдатель и Посетитель, активно используют ассоциацию для организации взаимодействия между объектами.