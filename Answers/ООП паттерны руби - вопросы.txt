1. Распишите основные принципы ООП. Привидите пример работающего кода для иллюстрации выполнения или невыполнения этих принципов.
2. Какие отношения между классами могут быть? Опишите, что они из себя представляют в предметной области, в коде и на диаграмме классов. Покажите пример кода с реализацией этих отношений.
3. Расскажите, что такое ассоциация между классами, привидите частные случаи, покажите примеры. Расскажите, какие паттерны проектирования используют данное отношение. Покажите примеры работающего кода с реализацией данного отношения.
4. Расскажите, как Вы понимаете принцип - предпочитайте делегацию наследованию. Покажите примеры кода, покажите, в каком случае имеет смысл использовать любое из отношений. Расскажите, какие паттерны иллюстрируют данный подход.
5. Расскажите, какие Вам известны способы создания экземпляров классов, покажите примеры некачественного и качественного подхода(работающий код). Расскажите, какие паттерны проектирования, описывающие эти подходы, Вам известны.
6. Расскажите ООП структуру Вашего языка программирования. Расскажите, какие методы принято переопределять и в каком случае.
7. Какие паттерны проектирования Вам известны, что это такое, как их принято классифицировать? Расскройте взаимосвязь паттернов проектирования, архитектурных паттернов и фреймворков. Покажите на примерах.
8. Расскажите, как составлять диаграмму классов, что на ней принято отмечать и каким образом. Раскройте все составляющие, покажите взаимосвязь диаграммы классов и кода.
9. Какие структурные паттерны проектирования Вам известны? Перечислите и расскажите базовые принципы всех паттернов. Раскройте подробно два паттерна, покажите проблему, покажите предлагаемое решение на диаграммах и в коде. Укажите связь этих паттернов с другими известными Вам паттернами.
10. Какие порождающие паттерны проектирования Вам известны? Перечислите и расскажите базовые принципы всех паттернов. Раскройте подробно два паттерна, покажите проблему, покажите предлагаемое решение на диаграммах и в коде. Укажите связь этих паттернов с другими известными Вам паттернами.
11. Какие поведенческие паттерны проектирования Вам известны? Перечислите и расскажите базовые принципы всех паттернов. Раскройте подробно два поведенчиских паттерна, покажите проблему, покажите предлагаемое решение на диаграммах и в коде. Укажите связь этих паттернов с другими известными Вам паттернами.
12. Расскажите про подходы в сравнении объектов на равенство и на больше-меньше в руби. Расскажите, какие принципы ООП и паттерны проектирования используются в реализации данных подходов.
13.  Расскажите, как иллюстрируется взаимодействие объектов на диаграмме последовательности. Покажите тривиальный пример, далее покажите пример диаграммы последовательностей, иллюстрирующий взаимодействие объектов в рамках любого архитектурного паттерна.
14. Архитектурный паттерн MVC. Расскажите базовый подход, расскажите, какие паттерны проектирования используются при его реализации. Покажите взаимодействие объектов в рамках реализации некоторых операций CRUD на диаграмме последовательностей. Покажите, в каких фреймворках он применяется.
15. Архитектурный паттерн MVP. Расскажите проблематику в двух подходах в MVC, которая привела к появлению данного архитектурного паттерна. Расскажите базовый подход. Покажите взаимодействие объектов в рамках реализации некоторых операций CRUD на диаграмме последовательностей. Покажите, в каких фреймворках он применяется.
16. Архитектурный паттерн MVVM. Расскажите проблематику, которая привела к появлению данного архитектурного паттерна. Расскажите базовый подход. Покажите взаимодействие объектов в рамках реализации некоторых операций CRUD на диаграмме последовательностей. Покажите, в каких фреймворках он применяется.
17. Архитектурные паттерны. Расскажите о всех архитектурных паттернах, которые Вам известны, базовые подходы, в каких языках и фреймворках применяются. Раскройте паттерн, применённый в фреймворке Вашей задачи. Покажите взаимодействие объектов в рамках реализации некоторых операций CRUD на диаграмме последовательностей.
18. Что такое рефакторинг? Когда его требуется применять? Приведите примеры методов рефакторинга и примеры антипаттернов, которые данные методы позволяют исправить. 
19. Раскройте антипаттерны: Неуместная близость, завистливые функции, классы данных, одержимость элементарными типами, ленивый класс. РАскройте почему они считаются антипаттернами, привидите примеры кода, покажите методы рефакторинга, позволяющие их исправить. Укажите паттерны разработки, позволяющие не допускать таких ошибок.
20. Раскройте антипаттерны: дублирование кода, длинный метод, длинный класс, длинный список параметров, повторы условных операторов, альтернативные классы с разными интерфейсами. РАскройте почему они считаются антипаттернами, привидите примеры кода, покажите методы рефакторинга, позволяющие их исправить. Укажите паттерны разработки, позволяющие не допускать таких ошибок.
21. Раскройте антипаттерны: стрела дробью, расходящиеся модификации, посредник, теоретическая общность, параллельные иерархии наследования. Покажите, как они взаимосвязаны. РАскройте почему они считаются антипаттернами, привидите примеры кода, покажите методы рефакторинга, позволяющие их исправить. Укажите паттерны разработки, позволяющие не допускать таких ошибок, или приводящие к ним.
22. Раскройте принцип единой отвественности. Покажите примеры антипаттернов его нарушающих, паттернов, его реализующих. Покажите на работающих примерах. 
23. Раскройте принцип открытости - закрытости. Покажите примеры антипаттернов его нарушающих, паттернов, его реализующих. Покажите на работающих примерах.
24. Раскройте принцип подстановки Барбары Лисков. Покажите примеры антипаттернов его нарушающих, паттернов, его реализующих. Покажите на работающих примерах. 
25. Раскройте принцип подстановки разделения интерфейсов. Покажите примеры антипаттернов его нарушающих, паттернов, его реализующих. Покажите на работающих примерах. 
26. Раскройте принцип инверсии зависимостей. Покажите примеры антипаттернов его нарушающих, паттернов, его реализующих. Покажите на работающих примерах. 
27. Принципы SOLID. Зачем нужны, о чём они, как взаимосвязаны с паттернами и антипаттернами? Покажите на примерах. Как реализуются в Вашей задаче и в выбранном Вами фреймворке.

Задача – подготавливается заранее. Выбрать тему – предметную область для автоматизации, построить ER модель предметной области - 3-4 таблицы в 3НФ. На Ruby-on-Rails построить web-приложение, реализующее операции CRUD для всех выбранных сущностей.